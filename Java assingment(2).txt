• W.A.J.P to get the character at the given index within the String. OriginalString = Tops Technologies! The character at position 0 is T, The characterat position 10 is o

ans=

public class Exercise1 {
   public static void main(String[] args)
    {
        String str = "Tops Technologies!";
        System.out.println("Original String = " + str);
        int index1 = str.charAt(0);
        int index2 = str.charAt(10);
        System.out.println("The character at position 0 is " +
            (char)index1);
        System.out.println("The character at position 10 is " +
            (char)index2);
    }
}




• W.A.J.P to concatenate a given string to the end of another string.
ans

public class Exercise7 {

    public static void main(String[] args)
    {
        String str1 = "Rajendra ";
        String str2 = "Tops";
        
        System.out.println("String 1: " + str1);
        System.out.println("String 2: " + str2); 
        String str3 = str1.concat(str2);
        System.out.println("The concatenated string: " + str3);
    }
}






• W.A.J.P to compare a given string to the specified character sequence.Comparing topsint.com and topsint.com: true Comparing Topsint.com andtopsint.com: false

public class Exercise9 {
public static void main(String[] args) {
    String str1 = "topsint.com", str2 = "Topsint.com";
    CharSequence cs = "topsint.com";
     System.out.println("Comparing "+str1+" and "+cs+": " + str1.contentEquals(cs));
      System.out.println("Comparing "+str2+" and "+cs+": " + str2.contentEquals(cs));
          }
}







• W.A.J.P to check whether a given string ends with the contents of anotherstring. "Java Exercises" ends with "se"? False "Java Exercise" ends with"se"? True

ans]


public class Exercise12 {

    public static void main(String[] args)
    {
        String str1 = "Java Exercises";
        String str2 = "Java Exercise";
        String end_str = "se";
        boolean ends1 = str1.endsWith(end_str);
        boolean ends2 = str2.endsWith(end_str);


        System.out.println("\"" + str1 + "\" ends with " +

        System.out.println("\"" + str2 + "\" ends with " +
            "\"" + end_str + "\"? " + ends2);
    }
}



• W.A.J.P to find all interleaving of given strings.The given strings are: WX YZThe interleaving strings are: YWZX WYZX YWXZ WXYZ YZWX WYXZ

ans]

import java.util.HashSet;
import java.util.Set;

class Main {
 public static void allInterleavings(String res, String P, String Q, Set < String > out) {
  if (P.length() == 0 && Q.length() == 0) {
   out.add(res);
   return;
  }
  if (P.length() > 0) {
   allInterleavings(res + P.charAt(0), P.substring(1), Q, out);
  }
  if (Q.length() > 0) {
   allInterleavings(res + Q.charAt(0), P, Q.substring(1), out);
  }
 }

 public static void main(String[] args) {
  String P = "WX";
  String Q = "YZ";
  System.out.println("The given strings are: " + P + "  " + Q);
  System.out.println("The interleavings strings are: ");
  Set < String > out = new HashSet < > ();
  allInterleavings("", P, Q, out);

  out.stream().forEach(System.out::println);
 }
}




• W.A.J.P to find the second most frequent character in a given string. Thegiven string is: successes The second most frequent char in the string is: c


import java.util.*;
public class Main {
 static final int NOOFCHARS = 256;
 static char get2ndMostFreq(String str1) {

  int[] ctr = new int[NOOFCHARS];
  int i;;/.
  for (i = 0; i < str1.length(); i++)
   (ctr[str1.charAt(i)]) ++;

  int ctr_first = 0, ctr_second = 0;
  for (i = 0; i < NOOFCHARS; i++) {
   if (ctr[i] > ctr[ctr_first]) {
    ctr_second = ctr_first;
    ctr_first = i;
   } else if (ctr[i] > ctr[ctr_second] && ctr[i] != ctr[ctr_first])
    ctr_second = i;
  }
  return (char) ctr_second;
 }
 public static void main(String args[]) {
  String str1 = "successes";
  System.out.println("The given string is: " + str1);
  char res = get2ndMostFreq(str1);
  if (res != '\0')
   System.out.println("The second most frequent char in the string is: " + res);
  else
   System.out.println("No second most frequent character found in the string.");
 }
}







• Create a class named 'PrintNumber' to print various numbers of different datatypes by creating different methods with the same name 'printn' having aparameter for each data type.


public class PrintNumber {

  

    public void printn(int num) {

        System.out.println("Integer: " + num);

    }

  
    public void printn(float num) {

        System.out.println("Float: " + num);

    }


    public void printn(double num) {

        System.out.println("Double: " + num);

    }

   

    public void printn(long num) {

        System.out.println("Long: " + num);

    }

  

    public void printn(boolean value) {

        System.out.println("Boolean: " + value);

    }

    public void printn(String str) {

        System.out.println("String: " + str);

    }


    public static void main(String[] args) {

        PrintNumber obj = new PrintNumber();

        obj.printn(10);

        obj.printn(3.14f);

        obj.printn(3.14159);

        obj.printn(100000000000L);

        obj.printn(true);

        obj.printn("Hello, world!");

    }

}



• Create a class to print an integer and a character with two methods havingthe same name but different sequence of the integer and the characterparameters. For example, if the parameters of the first method are of the form(int n, char c), then that of the second method will be of the form (char c, intn).


 

public class PrintIntegerChar {

   

    public void print(int num, char ch) {

        System.out.println("Integer: " + num + ", Character: " + ch);

    }

   

    public void print(char ch, int num) {

        System.out.println("Character: " + ch + ", Integer: " + num);

    }

  
    public static void main(String[] args) {

        PrintIntegerChar obj = new PrintIntegerChar();

        obj.print(10, 'A');

        obj.print('B', 20);

    }

}




• Create a class to print the area of a square and a rectangle. The class has twomethods with the same name but different number of parameters. The methodfor printing area of a rectangle has two parameters which are length andbreadth respectively while the other method for printing area of square hasone parameter which is side of square.


#include <iostream>
using namespace std;

class Area
{
public:
    void output(int l, int b)
    {
        cout<<"Area of Rectangle is = "<<l*b<<endl;
    }

    void output(int a)
    {
        cout<<"Area of Square is = "<<a*a<< endl;
    }
};

int main()
{
    Area obj;
    obj.output(5,6);
    obj.output(5);
}         




• Create a class with a method that prints "This is a parent class" and its subclasswith another method that prints "This is child class". Now, create an object foreach of the class and call 1 - method of parent class by object of parent class 2- method of child class by object of child class 3 - method of parent class byobject of child class







• Create a class named 'Member' having the following members:Data members
a) Name
b) Age
c) Phone number
d) Address 5 - Salary
e) It also has a method named 'printSalary' which prints the salary of themembers.
f) Two classes 'Employee' and 'Manager' inherits the 'Member' class. The'Employee' and 'Manager' classes have data members 'specialization'and 'department' respectively. Now, assign name, age, phone number,address and salary to an employee and a manager by making an objectof both of these classes and print the same.



public class Member {
    private String name;
    private int age;
    private String phoneNumber;
    private String address;
    private double salary;

    public Member(String name, int age, String phoneNumber, String address, double salary) {
        this.name = name;
        this.age = age;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.salary = salary;
    }

    public void printSalary() {
        System.out.println("Salary " + salary);
    }
}

public class Employee extends Member {
    private String specialization;

    public Employee(String name, int age, String phoneNumber,
                    String address, double salary, String specialization) {
        super(name, age, phoneNumber, address, salary);
        this.specialization = specialization;
    }
}

public class Manager extends Member{
    private String department;

    public Manager(String name, int age, String phoneNumber,
                    String address, double salary, String department) {
        super(name, age, phoneNumber, address, salary);
        this.department = department;
    }
}

public class Main {
    public static void main(String[] args) {
        Employee employee = new Employee("Tom", 25, "555-555-55", "Home", 25631.5, "IT");
        Manager manager = new Manager("Ron", 30, "555-617-55", "Earth", 69586.5, "IT");
        employee.printSalary();
        manager.printSalary();
    }
}



• Create a class named 'Rectangle' with two data members 'length' and 'breadth'and two methods to print the area and perimeter of the rectangle respectively. Its constructor having parameters for length and breadth is used to initializethe length and breadth of the rectangle. Let class 'Square' inherit the 'Rectangle'class with its constructor having a parameter for its side (suppose s) calling theconstructor of its parent class as 'super (s, s)'. Print the area and perimeter of arectangle and a square.


class Rectangle 
{    int length,breadth; 
   public Rectangle(int l, int b)  
  {        length = l;        breadth = b;    } 
   void print_area()   
 {        System.out.println(length*breadth);    } 
   void print_perimeter() 
   {        System.out.println(2*(length+breadth));   
 }}
class Square extends Rectangle     
   {    public Square(int s)  
      {super(s, s);}       
 } 
public class Assignment2
 {    public static void main(String[] args) 
{ 
       Rectangle r = new Rectangle (4,5);  
      Square s = new Square (4);       
 r.print_area();      
  r.print_perimeter();     
   s.print_area();   
     s.print_perimeter(); 
  }}




• Write a program to print the area and perimeter of a triangle having sides of 3,4 and 5 units by creating a class named 'Triangle' without any parameter in itsconstructor.


#include<iostream>
#include<string>
#include<vector>
#include<math.h>
using namespace std;




class triangle{
public: 
  void  print_perimeter(int s1,int s2,int s3){
        int s;
        s= s1+s2+s3;
        cout<<"perimeter is "<<s<<endl;
    }
    
    void print_area(int s1,int s2,int s3){
        int s= (s1+s2+s3)/2;
        double area;
        area= sqrt( s*(s-s1)*(s-s2)*(s-s3) );
      
      if ((s1+s2)<s3  || (s1+s3)<s2||(s2+s3)<s1 )
      {cout<<"invalid triangle"; 
    }
    else 
    {
        cout<<"area is: "<<area<<endl;
    }
    }
};

int main(){
 triangle t1;
t1.print_perimeter(3,4,5);
t1.print_area(1,10,12);
    return 0;
    
}


• Print the sum, difference and product of two complex numbers by creating aclass named 'Complex' with separate methods for each operation whose realand imaginary parts are entered by user.




import java.util.*;


class Complex {

	int real, imaginary;
	Complex()
	{
	
	Complex(int tempReal, int tempImaginary)
	{
		real = tempReal;
		imaginary = tempImaginary;
	}
	Complex addComp(Complex C1, Complex C2)
	{
	
		Complex temp = new Complex();

	
		temp.real = C1.real + C2.real;


		temp.imaginary = C1.imaginary + C2.imaginary;

		return temp;
	}

	Complex subtractComp(Complex C1, Complex C2)
	{
	
		Complex temp = new Complex();

		temp.real = C1.real - C2.real;

	
		temp.imaginary = C1.imaginary - C2.imaginary;

		return temp;
	}

	void printComplexNumber()
	{
		System.out.println("Complex number: "
						+ real + " + "
						+ imaginary + "i");
	}
}


public class GFG {

	public static void main(String[] args)
	{

		Complex C1 = new Complex(3, 2);

	
		C1.printComplexNumber();


		Complex C2 = new Complex(9, 5);

		C2.printComplexNumber();

	
		Complex C3 = new Complex();

		C3 = C3.addComp(C1, C2);
		System.out.print("Sum of ");
		C3.printComplexNumber();
		C3 = C3.subtractComp(C1, C2);
		System.out.print("Difference of ");
		C3.printComplexNumber();
	}
}





• W.A.J. P to create one thread by implementing Runnable interface in Class.

public class RunnableDemo {

	public static void main(String[] args)
	{
		System.out.println("Main thread is- "
						+ Thread.currentThread().getName());
		Thread t1 = new Thread(new RunnableDemo().new RunnableImpl());
		t1.start();
	}

	private class RunnableImpl implements Runnable {

		public void run()
		{
			System.out.println(Thread.currentThread().getName()
							+ ", executing run() method!");
		}
	}
}



• W.A.J. P to create one thread by extending Thread class in another Class.



import java.io.*;
class GFG extends Thread {
	public void run()
	{
		System.out.print("Welcome to tops techno.");
	}
	public static void main(String[] args)
	{
		GFG g = new GFG(); // creating thread
		g.start(); 
	}
}


• W.A.J.P to create 2 threads and execute that threads by providing sleeptime as 2000ms and check the execution.


import java.io.*;
import java.lang.Thread;

class GFG {
	public static void main(String[] args)
	{
	
		try {
			for (int i = 0; i < 5; i++) {
			
				Thread.sleep(2000);
				System.out.println(i);
			}
		}
		catch (Exception e) {
		
			
			System.out.println(e);
		}
	}
}




• W.A.J.P to start the same Thread twice by calling start () method twice.Test ThreadTwice1 t1=new TestThreadTwice1(); t1.start (); t1.start ();

class TestThreadTwice1 extends Thread {
    public void run() {
        System.out.println("Thread is running...");
    }
}

public class Main {
    public static void main(String[] args) {
        TestThreadTwice1 t1 = new TestThreadTwice1();
        t1.start();
        // Trying to start the same thread again
        t1.start(); // This will result in an IllegalThreadStateException
    }
}


• W.A.J.P to create 2 threads and make one thread as Daemon Thread byusing set Daemon () method of Thread class and check whether the threadis set daemon or not by using is Daemon () method.

class DaemonThread extends Thread {
    public void run() {
        if (isDaemon()) {
            System.out.println("Daemon thread.");
        } else {
            System.out.println("Not a daemon thread.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        DaemonThread t1 = new DaemonThread();
        t1.setDaemon(true); // Setting thread as Daemon
        t1.start();
    }
}


•Write a Java program to create a new array list, add some colours (string)and print out the collection.

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        // Create an ArrayList of colors
        ArrayList<String> colors = new ArrayList<>();

        // Add colors to the ArrayList
        colors.add("Red");
        colors.add("Green");
        colors.add("Blue");

        // Print the collection
        System.out.println(colors);

        // Iterate through all elements
        for (String color : colors) {
            System.out.println(color);
        }

        // Insert an element at the first position
        colors.add(0, "Yellow");

        // Retrieve an element at a specified index
        String element = colors.get(2);
        System.out.println("Element at index 2: " + element);

        // Update a specific array element
        colors.set(1, "Purple");

        // Remove the third element
        colors.remove(2);

        // Search for an element
        boolean containsBlue = colors.contains("Blue");
        System.out.println("Contains Blue: " + containsBlue);

        // Sort the ArrayList
        Collections.sort(colors);

        // Copy one ArrayList into another
        ArrayList<String> copyList = new ArrayList<>(colors);

        // Shuffle elements
        Collections.shuffle(colors);
    }
}


• Write a Java program to iterate through all elements in an array list.

import java.util.HashSet;
import java.util.Iterator;

public class Main {
    public static void main(String[] args) {
        // Create a HashSet of elements
        HashSet<String> set = new HashSet<>();

        // Append an element to the end
        set.add("Element1");

        // Iterate through all elements
        Iterator<String> iterator = set.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }

        // Get the number of elements
        int size = set.size();
        System.out.println("Size of HashSet: " + size);

        // Check if a key-value mapping exists (empty)
        boolean isEmpty = set.isEmpty();
        System.out.println("Is HashSet empty? " + isEmpty);
    }
}


• Write a Java program to insert an element into the array list at the firstposition.

import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        // Create a HashMap
        Map<String, Integer> map = new HashMap<>();

        // Associate a value with a key
        map.put("Key1", 1);
        map.put("Key2", 2);

        // Count the number of key-value mappings
        int size = map.size();
        System.out.println("Size of HashMap: " + size);

        // Check if a key-value mapping exists
        boolean containsKey = map.containsKey("Key1");
        System.out.println("Contains Key1: " + containsKey);
    }
}


• Write a Java program to retrieve an element (at a specified index) from agiven array list.

import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static void main(String[] args) {
        // Create an ArrayList of elements
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        // Swap two elements
        Collections.swap(list, 0, 2);

        // Print the ArrayList to see the result
        System.out.println(list); // Output: [3, 2, 1]
    }
}


• Write a Java program to update specific array element by given element.

import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Create two ArrayLists
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(2);

        ArrayList<Integer> list2 = new ArrayList<>();
        list2.add(3);
        list2.add(4);

        // Join the two ArrayLists
        list1.addAll(list2);

        // Print the joined ArrayList
        System.out.println(list1); // Output: [1, 2, 3, 4]
    }
}


• Write a Java program to remove the third element from an array list.

import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Create a HashSet of elements
        HashSet<String> set = new HashSet<>();
        set.add("Element1");
        set.add("Element2");

        // Convert HashSet to an array
        String[] array = set.toArray(new String[0]);

        // Convert HashSet to a List/ArrayList
        List<String> list = new ArrayList<>(set);
    }
}


• Write a Java program to search an element in an array list.

import java.util.ArrayList;
import java.util.Scanner;

public class ElementSearch {
    public static void main(String[] args) {
        // Create an ArrayList
        ArrayList<Integer> arrayList = new ArrayList<>();

        // Add elements to the ArrayList
        arrayList.add(10);
        arrayList.add(20);
        arrayList.add(30);
        arrayList.add(40);
        arrayList.add(50);

        // Input element to search
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the element to search: ");
        int searchElement = scanner.nextInt();

        // Method 1: Using the contains() method
        boolean found = arrayList.contains(searchElement);
        if (found) {
            System.out.println(searchElement + " is found in the ArrayList.");
        } else {
            System.out.println(searchElement + " is not found in the ArrayList.");
        }

        // Method 2: Loop through the ArrayList
        boolean foundByLoop = false;
        for (int



• Write a Java program to sort a given array list.

import java.util.ArrayList;
import java.util.Collections;

public class ArrayListSort {
    public static void main(String[] args) {
        // Create an ArrayList
        ArrayList<Integer> arrayList = new ArrayList<>();

        // Add elements to the ArrayList
        arrayList.add(10);
        arrayList.add(30);
        arrayList.add(20);
        arrayList.add(5);
        arrayList.add(15);

        // Print the original ArrayList
        System.out


• Write a Java program to copy one array list into another.

import java.util.ArrayList;

public class CopyArrayList {
    public static void main(String[] args) {
        ArrayList<Integer> sourceList = new ArrayList<>();
        sourceList.add(1);
        sourceList.add(2);
        sourceList.add(3);

        ArrayList<Integer> targetList = new ArrayList<>(sourceList);

        System.out.println("Source List: " + sourceList);
        System.out.println("Target List: " + targetList);
    }
}



• Write a Java program to shuffle elements in an array list.

import java.util.ArrayList;
import java.util.Collections;

public class ShuffleArrayList {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        Collections.shuffle(list);

        System.out.println("Shuffled List: " + list);
    }
}


• Write a Java program to append the specified element to the end of a hashset.

import java.util.HashSet;

public class AppendToHashSet {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");

        set.add("cherry");

        System.out.println("Updated HashSet: " + set);
    }
}



• Write a Java program to iterate through all elements in a hash list.

import java.util.HashSet;
import java.util.Iterator;

public class IterateHashSet {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        set.add("cherry");

        Iterator<String> iterator = set.iterator();
        while (iterator.hasNext()) {
            String element = iterator.next();
            System.out.println(element);
        }
    }
}


• Write a Java program to get the number of elements in a hash set.

import java.util.HashSet;

public class HashSetSize {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        set.add("cherry");

        int size = set.size();
        System.out.println("Size of HashSet: " + size);
    }
}


• Write a Java program to associate the specified value with the specifiedkey in a HashMap.

import java.util.HashMap;
import java.util.Map;

public class HashMapExample {
    public static void main(String[] args) {
        // Create a HashMap
        Map<String, Integer> hashMap = new HashMap<>();

        // Associate a value with a key
        String key = "exampleKey";
        int value = 42;
        hashMap.put(key, value);

        // Print the HashMap
        System.out.println("HashMap: " + hashMap);
    }
}


• Write a Java program to count the number of key-value (size) mappingsin a map.

import java.util.HashMap;
import java.util.Map;

public class MapSizeExample {
    public static void main(String[] args) {
        // Create a HashMap
        Map<String, Integer> hashMap = new HashMap<>();

        // Add key-value mappings
        hashMap.put("key1", 100);
        hashMap.put("key2", 200);
        hashMap.put("key3", 300);

        // Get the size of the HashMap
        int size = hashMap.size();

        // Print the size
        System.out.println("Size of HashMap: " + size);
    }
}


• Write a Java program to reverse elements in an array list.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ReverseArrayList {
    public static void main(String[] args) {
        // Create an ArrayList
        List<String> arrayList = new ArrayList<>();

        // Add elements to the ArrayList
        arrayList.add("A");
        arrayList.add("B");
        arrayList.add("C");
        arrayList.add("D");

        // Reverse the elements in the ArrayList
        Collections.reverse(arrayList);

        // Print the reversed ArrayList
        System.out.println("Reversed ArrayList: " + arrayList);
    }
}


• Write a Java program to extract a portion of an array list.

import java.util.ArrayList;
import java.util.List;

public class ExtractArrayListPortion {
    public static void main(String[] args) {
        ArrayList<Integer> originalList = new ArrayList<>();
        originalList.add(1);
        originalList.add(2);
        originalList.add(3);
        originalList.add(4);
        originalList.add(5);

        int startIndex = 1;
        int endIndex = 3;

        List<Integer> extractedList = originalList.subList(startIndex, endIndex


• Write a Java program to compare two array lists.

import java.util.ArrayList;
import java.util.List;

public class CompareArrayLists {
    public static void main(String[] args) {
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(2);
        list1.add(3);

        ArrayList<Integer> list2 = new ArrayList<>();
        list2.add(1);
        list2.add(2);
        list2.add(3);

        boolean areEqual = list1.equals(list2);

        System.out.println("Are the lists equal? " + areEqual);
    }
}


• Write a Java program of swap two elements in an array list.

import java.util.ArrayList;
import java.util.Collections;

public class SwapArrayListElements {
    public static void main(String[] args) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        arrayList.add(1);
        arrayList.add(2);
        arrayList.add(3);
        arrayList.add(4);

        int index1 = 1;
        int index2 = 3;

        Collections.swap(arrayList, index1, index2);

        System.out.println("After swapping: " + arrayList);
    }
}


• Write a Java program to join two array lists.

import java.util.ArrayList;
import java.util.List;

public class JoinArrayLists {
    public static void main(String[] args) {
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(2);

        ArrayList<Integer> list2 = new ArrayList<>();
        list2.add(3);
        list2.add(4);

        list1.addAll(list2);

        System.out.println("Joined ArrayList: " + list1);
    }
}


• Write a Java program to convert a hash set to an array.

import java.util.HashSet;
import java.util.Arrays;

public class HashSetToArray {
    public static void main(String[] args) {
        HashSet<String> hashSet = new HashSet<>();
        hashSet.add("Apple");
        hashSet.add("Banana");
        hashSet.add("Orange");

        String[] array = hashSet.toArray(new String[hashSet.size()]);

        System.out.println("Array from HashSet: " + Arrays.toString(array));
    }
}


• Write a Java program to convert a hash set to a List/ArrayList.

import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

public class HashSetToArrayList {
    public static void main(String[] args) {
        HashSet<Integer> hashSet = new HashSet<>();
        hashSet.add(1);
        hashSet.add(2);
        hashSet.add(3);

        List<Integer> arrayList = new ArrayList<>(hashSet);

        System.out.println("ArrayList from HashSet: " + arrayList);
    }
}


• Write a Java program to check whether a map contains key-valuemappings (empty) or not.

import java.util.HashMap;
import java.util.Map;

public class CheckEmptyMap {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();

        boolean isEmpty = map.isEmpty();

        System.out.println("Is the map empty? " + isEmpty);
    }
}

